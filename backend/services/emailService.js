const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    // C·∫•u h√¨nh SMTP transporter
    this.transporter = nodemailer.createTransporter({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: process.env.SMTP_PORT || 587,
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER, // Gmail address
        pass: process.env.SMTP_PASS  // Gmail app password
      }
    });
  }

  // Template cho email OTP chuy·ªÉn kho·∫£n
  static getTransferOTPTemplate(recipientName, amount, recipientAccount, otp) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>X√°c th·∫≠n giao d·ªãch chuy·ªÉn kho·∫£n</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #1976d2; color: white; padding: 20px; text-align: center; }
            .content { background: #f9f9f9; padding: 20px; border: 1px solid #ddd; }
            .otp-box { background: #fff; border: 2px solid #1976d2; padding: 15px; text-align: center; margin: 20px 0; }
            .otp-code { font-size: 24px; font-weight: bold; color: #1976d2; letter-spacing: 3px; }
            .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
            .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin: 10px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üè¶ Internet Banking</h1>
                <h2>X√°c th·∫≠n giao d·ªãch chuy·ªÉn kho·∫£n</h2>
            </div>
            
            <div class="content">
                <p>K√≠nh ch√†o <strong>${recipientName}</strong>,</p>
                
                <p>B·∫°n v·ª´a th·ª±c hi·ªán y√™u c·∫ßu chuy·ªÉn kho·∫£n v·ªõi th√¥ng tin sau:</p>
                
                <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
                    <tr style="background: #f8f9fa;">
                        <td style="padding: 10px; border: 1px solid #dee2e6; font-weight: bold;">S·ªë ti·ªÅn:</td>
                        <td style="padding: 10px; border: 1px solid #dee2e6;">${amount.toLocaleString('vi-VN')} VNƒê</td>
                    </tr>
                    <tr>
                        <td style="padding: 10px; border: 1px solid #dee2e6; font-weight: bold;">T√†i kho·∫£n nh·∫≠n:</td>
                        <td style="padding: 10px; border: 1px solid #dee2e6;">${recipientAccount}</td>
                    </tr>
                    <tr style="background: #f8f9fa;">
                        <td style="padding: 10px; border: 1px solid #dee2e6; font-weight: bold;">Th·ªùi gian:</td>
                        <td style="padding: 10px; border: 1px solid #dee2e6;">${new Date().toLocaleString('vi-VN')}</td>
                    </tr>
                </table>
                
                <div class="otp-box">
                    <p style="margin: 0 0 10px 0;">M√£ OTP x√°c th·∫≠n giao d·ªãch:</p>
                    <div class="otp-code">${otp}</div>
                    <p style="margin: 10px 0 0 0; font-size: 14px; color: #666;">
                        M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong>
                    </p>
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong>
                    <ul style="margin: 5px 0;">
                        <li>Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>Ng√¢n h√†ng kh√¥ng bao gi·ªù y√™u c·∫ßu OTP qua ƒëi·ªán tho·∫°i</li>
                        <li>N·∫øu kh√¥ng ph·∫£i b·∫°n th·ª±c hi·ªán, vui l√≤ng li√™n h·ªá ngay hotline</li>
                    </ul>
                </div>
                
                <p>Tr√¢n tr·ªçng,<br><strong>Ng√¢n h√†ng Internet Banking</strong></p>
            </div>
            
            <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.<br>
                Hotline: 1900-xxxx | Website: www.internetbanking.com</p>
            </div>
        </div>
    </body>
    </html>`;
  }

  // Template cho email OTP reset password
  static getPasswordResetOTPTemplate(recipientName, otp) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #dc3545; color: white; padding: 20px; text-align: center; }
            .content { background: #f9f9f9; padding: 20px; border: 1px solid #ddd; }
            .otp-box { background: #fff; border: 2px solid #dc3545; padding: 15px; text-align: center; margin: 20px 0; }
            .otp-code { font-size: 24px; font-weight: bold; color: #dc3545; letter-spacing: 3px; }
            .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            </div>
            
            <div class="content">
                <p>K√≠nh ch√†o <strong>${recipientName}</strong>,</p>
                
                <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Internet Banking.</p>
                
                <div class="otp-box">
                    <p style="margin: 0 0 10px 0;">M√£ OTP x√°c th·∫≠n:</p>
                    <div class="otp-code">${otp}</div>
                    <p style="margin: 10px 0 0 0; font-size: 14px; color: #666;">
                        M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong>
                    </p>
                </div>
                
                <p><strong>N·∫øu kh√¥ng ph·∫£i b·∫°n th·ª±c hi·ªán, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá hotline ngay.</strong></p>
                
                <p>Tr√¢n tr·ªçng,<br><strong>Ng√¢n h√†ng Internet Banking</strong></p>
            </div>
            
            <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
            </div>
        </div>
    </body>
    </html>`;
  }

  // G·ª≠i OTP chuy·ªÉn kho·∫£n
  static async sendTransferOTP(email, recipientName, amount, recipientAccount, otp) {
    try {
      const emailService = new EmailService();
      
      const mailOptions = {
        from: `"Internet Banking" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'üè¶ X√°c th·∫≠n giao d·ªãch chuy·ªÉn kho·∫£n - OTP',
        html: this.getTransferOTPTemplate(recipientName, amount, recipientAccount, otp)
      };

      const result = await emailService.transporter.sendMail(mailOptions);
      console.log('Transfer OTP email sent:', result.messageId);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error('Error sending transfer OTP email:', error);
      return { success: false, error: error.message };
    }
  }

  // G·ª≠i OTP reset password
  static async sendPasswordResetOTP(email, otp, recipientName) {
    try {
      const emailService = new EmailService();
      
      const mailOptions = {
        from: `"Internet Banking" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - OTP x√°c th·∫≠n',
        html: this.getPasswordResetOTPTemplate(recipientName, otp)
      };

      const result = await emailService.transporter.sendMail(mailOptions);
      console.log('Password reset OTP email sent:', result.messageId);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error('Error sending password reset OTP email:', error);
      return { success: false, error: error.message };
    }
  }

  // G·ª≠i th√¥ng b√°o nh·∫Øc n·ª£
  static async sendDebtNotification(email, recipientName, senderName, amount, message) {
    try {
      const emailService = new EmailService();
      
      const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #ff9800; color: white; padding: 20px; text-align: center;">
          <h1>üí∞ Th√¥ng b√°o nh·∫Øc n·ª£</h1>
        </div>
        <div style="padding: 20px; background: #f9f9f9;">
          <p>K√≠nh ch√†o <strong>${recipientName}</strong>,</p>
          <p>B·∫°n c√≥ m·ªôt nh·∫Øc n·ª£ m·ªõi t·ª´ <strong>${senderName}</strong>:</p>
          <div style="background: white; padding: 15px; border-left: 4px solid #ff9800; margin: 15px 0;">
            <p><strong>S·ªë ti·ªÅn:</strong> ${amount.toLocaleString('vi-VN')} VNƒê</p>
            <p><strong>N·ªôi dung:</strong> ${message}</p>
            <p><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</p>
          </div>
          <p>Vui l√≤ng ƒëƒÉng nh·∫≠p Internet Banking ƒë·ªÉ xem chi ti·∫øt v√† thanh to√°n.</p>
        </div>
      </div>`;
      
      const mailOptions = {
        from: `"Internet Banking" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'üí∞ Th√¥ng b√°o nh·∫Øc n·ª£ m·ªõi',
        html: htmlContent
      };

      const result = await emailService.transporter.sendMail(mailOptions);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error('Error sending debt notification:', error);
      return { success: false, error: error.message };
    }
  }

  // G·ª≠i th√¥ng b√°o giao d·ªãch th√†nh c√¥ng
  static async sendTransactionNotification(email, recipientName, transactionData) {
    try {
      const emailService = new EmailService();
      
      const { type, amount, fromAccount, toAccount, message, transactionId } = transactionData;
      
      const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #4caf50; color: white; padding: 20px; text-align: center;">
          <h1>‚úÖ Giao d·ªãch th√†nh c√¥ng</h1>
        </div>
        <div style="padding: 20px; background: #f9f9f9;">
          <p>K√≠nh ch√†o <strong>${recipientName}</strong>,</p>
          <p>Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng:</p>
          <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">M√£ giao d·ªãch:</td><td style="padding: 8px; border: 1px solid #ddd;">${transactionId}</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">Lo·∫°i giao d·ªãch:</td><td style="padding: 8px; border: 1px solid #ddd;">${type}</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">S·ªë ti·ªÅn:</td><td style="padding: 8px; border: 1px solid #ddd;">${amount.toLocaleString('vi-VN')} VNƒê</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">T·ª´ t√†i kho·∫£n:</td><td style="padding: 8px; border: 1px solid #ddd;">${fromAccount}</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">ƒê·∫øn t√†i kho·∫£n:</td><td style="padding: 8px; border: 1px solid #ddd;">${toAccount}</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">N·ªôi dung:</td><td style="padding: 8px; border: 1px solid #ddd;">${message}</td></tr>
            <tr><td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">Th·ªùi gian:</td><td style="padding: 8px; border: 1px solid #ddd;">${new Date().toLocaleString('vi-VN')}</td></tr>
          </table>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• Internet Banking.</p>
        </div>
      </div>`;
      
      const mailOptions = {
        from: `"Internet Banking" <${process.env.SMTP_USER}>`,
        to: email,
        subject: `‚úÖ Giao d·ªãch th√†nh c√¥ng - ${transactionId}`,
        html: htmlContent
      };

      const result = await emailService.transporter.sendMail(mailOptions);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error('Error sending transaction notification:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = EmailService;